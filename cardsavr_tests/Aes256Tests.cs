using System;
using System.Text;
using Xunit;

using Switch.Security;


namespace cardsavr_tests
{
    public class Aes256Tests
    {
        private static readonly string _staticKey = "VeY9uD0w3zRdrlmIPxnU/l+Vr8w2bbV26E6DxajFu+A=";

        public Aes256Tests()
        {
        }

        [Fact]
        public void EncryptDecrypt()
        {
            // generated by the Javascript code using a known IV (below).
            string expected = "I8em4KLS8Xpg9yrUhetAOjXQLLd/sYvNFJDlsmHa2IY=$YWJjZGVmZ2hpamtsbW5vcA==";
            string input = "some super double secret text";

            // use an Aes256 object in test mode with a known IV.
            string knownIv = Convert.ToBase64String(Encoding.UTF8.GetBytes("abcdefghijklmnop"));
            Aes256 aes = new Aes256(knownIv);
            string encrypted = aes.Encrypt(input, _staticKey);
            Console.Write("Actual Encrypted Value = "+encrypted);
            Assert.Equal(expected, encrypted);

            // decrypt using the static method call.
            string[] parts = encrypted.Split(new char[] { '$' });
            string result = Aes256.DecryptText(parts[0], knownIv, _staticKey);
            Assert.Equal(input, result);

            int length = 100;
            byte[] b = Aes256.GetRandomBytes(length);
            Assert.Equal(b.Length, length);
            
            string s = Aes256.GetRandomString(length);
            Assert.Equal(s.Length, length);

            length = 101;
            s = Aes256.GetRandomString(length);
            Assert.Equal(s.Length, length);

            length = 99;
            s = Aes256.GetRandomString(length);
            Assert.Equal(s.Length, length);

            length = 44;
            s = Aes256.GetRandomString(length);
            Assert.Equal(s.Length, length);

            s = Aes256.GetRandomString(length, 32); //this is how we make an integrator key
            Assert.Equal(s.Length, length);


        }
    }
}
